# .github/workflows/fabric-deploy.yml
name: Deploy Fabric Semantic Model (Dev)

on:
  push:
    branches: [main, test-1]
  workflow_dispatch:

env:
  DATABASE_LOGICAL_ID: 'c91da76f-8f7a-ab41-4832-b16b4022af76'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Get Connection String and Extract Server Name
      run: |
        echo "üîç Getting connection string from Fabric REST API..."
        
        WORKSPACE_ID="${{ secrets.FABRIC_WORKSPACE_ID_DEV }}"
        
        # Get access token
        TOKEN_RESPONSE=$(curl -s -X POST \
          "https://login.microsoftonline.com/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.FABRIC_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.FABRIC_CLIENT_SECRET }}" \
          -d "scope=https://analysis.windows.net/powerbi/api/.default" \
          -d "grant_type=client_credentials")
        
        ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
          echo " Failed to get access token"
          exit 1
        fi
        
        echo "‚úÖ Got access token"
        
        # Get SQL Database connection string
        echo "üìù Getting SQL Database connection string..."
        CONNECTION_RESPONSE=$(curl -s -X GET \
          "https://api.fabric.microsoft.com/v1/workspaces/$WORKSPACE_ID/sqlDatabases/$DATABASE_LOGICAL_ID/connectionString" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json")
        
        echo "üìã Connection response:"
        echo "$CONNECTION_RESPONSE"
        
        # Extract connection string from response
        CONNECTION_STRING=$(echo "$CONNECTION_RESPONSE" | jq -r '.connectionString // .value // empty')
        
        if [ -z "$CONNECTION_STRING" ]; then
          echo "‚ö†Ô∏è  No connection string in response, trying alternative endpoint..."
          
          # Try getting from database details
          DB_RESPONSE=$(curl -s -X GET \
            "https://api.fabric.microsoft.com/v1/workspaces/$WORKSPACE_ID/sqlDatabases/$DATABASE_LOGICAL_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN")
          
          CONNECTION_STRING=$(echo "$DB_RESPONSE" | jq -r '.properties.connectionString // empty')
        fi
        
        if [ -n "$CONNECTION_STRING" ]; then
          echo "‚úÖ Found connection string: $CONNECTION_STRING"
          
          # Extract server name from connection string
          SERVER_NAME=$(echo "$CONNECTION_STRING" | grep -oP '(?<=Server=)[^;,]+' | head -1)
          
          if [ -n "$SERVER_NAME" ]; then
            echo "üåê Extracted server name: $SERVER_NAME"
          else
            echo "‚ùå Could not extract server name from connection string"
            exit 1
          fi
        else
          echo "‚ùå Could not get connection string from API"
          exit 1
        fi
        
        # Store for next steps
        echo "SERVER_NAME=$SERVER_NAME" >> $GITHUB_ENV
        echo "CONNECTION_STRING=$CONNECTION_STRING" >> $GITHUB_ENV
        echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV

    - name: Update Fabric Connection
      run: |
        echo "üîß Updating expressions.tmdl with extracted server name..."
        echo "Connection String: $CONNECTION_STRING"
        echo "Extracted Server: $SERVER_NAME"
        echo "Database ID: $DATABASE_LOGICAL_ID"
        
        # Update expressions.tmdl with extracted server name
        cat > Fabric_artifacts/agentic_semantic_model.SemanticModel/definition/expressions.tmdl << EOF
        expression DatabaseQuery =
              let
                  database = Sql.Database("$SERVER_NAME", "$DATABASE_LOGICAL_ID")
              in
                  database
            lineageTag: 6a0481fe-610a-40d9-a67d-1874dc520a08
            annotation PBI_IncludeFutureArtifacts = False
        EOF
        
        echo "‚úÖ Updated expressions.tmdl"
        echo "üìÑ File content:"
        cat Fabric_artifacts/agentic_semantic_model.SemanticModel/definition/expressions.tmdl

    - name: Commit Changes Back to Repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if ! git diff --quiet; then
          git add Fabric_artifacts/agentic_semantic_model.SemanticModel/definition/expressions.tmdl
          git commit -m "üîß Auto-update Fabric connection for DEV [skip ci]
          
          - Extracted server from connection string
          - Server: $SERVER_NAME
          - Database: $DATABASE_LOGICAL_ID"
          
          git push origin ${{ github.ref_name }}
          echo "‚úÖ Changes committed and pushed"
        else
          echo "üìù No changes to commit"
        fi

    - name: Display Results
      run: |
        echo "üöÄ Connection String Extraction Results"
        echo "======================================="
        echo "Original Connection String:"
        echo "$CONNECTION_STRING"
        echo ""
        echo "Extracted Server Name:"
        echo "$SERVER_NAME"
        echo ""
        echo "Updated expressions.tmdl with:"
        echo "- Server: $SERVER_NAME"
        echo "- Database: $DATABASE_LOGICAL_ID"
        
    - name: Create Deployment Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fabric-artifacts-dev
        path: Fabric_artifacts/
        retention-days: 7