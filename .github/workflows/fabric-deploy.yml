# .github/workflows/fabric-deploy.yml
name: Deploy Fabric Semantic Model (Dev)

on:
  push:
    branches: [main, test-1]
  workflow_dispatch:

env:
  DATABASE_LOGICAL_ID: 'c91da76f-8f7a-ab41-4832-b16b4022af76'

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get Fabric Workspace Connection Info
      run: |
        echo "🔍 Discovering Fabric workspace connection details..."
        
        # Get workspace ID from secrets
        WORKSPACE_ID="${{ secrets.FABRIC_WORKSPACE_ID_DEV }}"
        
        # Get access token for Fabric API
        TOKEN_RESPONSE=$(curl -s -X POST \
          "https://login.microsoftonline.com/${{ secrets.TENANT_ID }}/oauth2/v2.0/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "client_id=${{ secrets.FABRIC_CLIENT_ID }}" \
          -d "client_secret=${{ secrets.FABRIC_CLIENT_SECRET }}" \
          -d "scope=https://analysis.windows.net/powerbi/api/.default" \
          -d "grant_type=client_credentials")
        
        ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
        
        if [ "$ACCESS_TOKEN" = "null" ]; then
          echo "❌ Failed to get access token"
          echo "Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "✅ Got access token"
        
        # Get workspace details
        WORKSPACE_RESPONSE=$(curl -s -X GET \
          "https://api.fabric.microsoft.com/v1/workspaces/$WORKSPACE_ID" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json")
        
        echo "📋 Workspace response: $WORKSPACE_RESPONSE"
        
        # Extract capacity info which contains the cluster/server details
        CAPACITY_ID=$(echo $WORKSPACE_RESPONSE | jq -r '.capacityId // empty')
        
        if [ -n "$CAPACITY_ID" ]; then
          echo "✅ Found capacity ID: $CAPACITY_ID"
          
          # Get capacity details to find the cluster URI
          CAPACITY_RESPONSE=$(curl -s -X GET \
            "https://api.fabric.microsoft.com/v1/capacities/$CAPACITY_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json")
          
          echo "📋 Capacity response: $CAPACITY_RESPONSE"
          
          # Extract the cluster URI or region info
          REGION=$(echo $CAPACITY_RESPONSE | jq -r '.region // "westeurope"')
          
          # Construct server name based on discovered info
          # Common patterns in Fabric:
          # Option A: {workspaceId}-{clusterSuffix}.datawarehouse.fabric.microsoft.com
          # Option B: {region}-{workspaceId}.datawarehouse.fabric.microsoft.com
          # Option C: {workspaceId}.{region}.datawarehouse.fabric.microsoft.com
          
          SERVER_NAME="${WORKSPACE_ID}.datawarehouse.fabric.microsoft.com"
          
          echo "🌐 Constructed server name: $SERVER_NAME"
        else
          echo "⚠️  Could not determine capacity, using workspace-based pattern"
          SERVER_NAME="${WORKSPACE_ID}.datawarehouse.fabric.microsoft.com"
        fi
        
        # Test different server name patterns if needed
        echo "🧪 Testing server name patterns..."
        echo "Pattern 1: ${WORKSPACE_ID}.datawarehouse.fabric.microsoft.com"
        echo "Pattern 2: ${WORKSPACE_ID}-cluster.datawarehouse.fabric.microsoft.com"
        echo "Pattern 3: ${WORKSPACE_ID}.${REGION}.datawarehouse.fabric.microsoft.com"
        
        # Store the final server name
        echo "SERVER_NAME=$SERVER_NAME" >> $GITHUB_ENV
        echo "WORKSPACE_ID=$WORKSPACE_ID" >> $GITHUB_ENV
    
    - name: Update Fabric Connection
      run: |
        echo "🔧 Updating expressions.tmdl with discovered connection..."
        echo "Workspace ID: $WORKSPACE_ID"
        echo "Server Name: $SERVER_NAME"
        echo "Database ID: $DATABASE_LOGICAL_ID"
        
        # Update expressions.tmdl with discovered connection
        cat > Fabric_artifacts/agentic_semantic_model.SemanticModel/definition/expressions.tmdl << EOF
        expression DatabaseQuery =
            let
                database = Sql.Database("$SERVER_NAME", "$DATABASE_LOGICAL_ID")
            in
                database
            lineageTag: 6a0481fe-610a-40d9-a67d-1874dc520a08
            annotation PBI_IncludeFutureArtifacts = False
        EOF
        
        echo "✅ Updated expressions.tmdl"
        echo "📄 File content:"
        cat Fabric_artifacts/agentic_semantic_model.SemanticModel/definition/expressions.tmdl
    
    - name: Validate Connection (Optional)
      run: |
        echo "🔍 Connection validation would go here"
        echo "Server: $SERVER_NAME"
        echo "Database: $DATABASE_LOGICAL_ID"
        # Add actual connection test if needed
    
    - name: Create Deployment Artifact
      uses: actions/upload-artifact@v4
      with:
        name: fabric-artifacts-dev
        path: Fabric_artifacts/
        retention-days: 7